#include <math.h>
#include <poll.h>
#include <getopt.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <mraa.h>
#include <sys/time.h>
#include <errno.h>

mraa_gpio_context button;
mraa_aio_context sensor;

double period = 1.0;
char scale;
int flag_log = 0;
int fd_log;
int stopped = 0;

void handle_err(int ret) {
  if (ret != 0) {
    fprintf(stderr, "Error: %s\n", strerror(errno));
    exit(1);
  }
}

double get_temp() {
  int a = mraa_aio_read(sensor);
  int B = 4275; //thermistor value
  double temp = 1023.0 / ((double)a) - 1.0;
  temp *= 100000.0;
  double C = 1.0 / (log(temp/100000.0)/B + 1/298.15) - 273.15;
  switch (scale) {
  case 'F': return C * 9/5 + 32;
  default: return C;
  }
}

void get_timestamp(char* buf) {
  struct timeval tv;
  struct tm *now;
  handle_err(gettimeofday(&tv, 0));
  now = localtime(&tv.tv_sec);
  sprintf(buf, "%d:%d:%d", now->tm_hour, now->tm_min, now->tm_sec);
}

void shutdown() {
  char timestamp[32];
  get_timestamp(timestamp);
  fprintf(stdout, "%s SHUTDOWN\n", timestamp);
  if (flag_log) {
    dprintf(fd_log, "%s SHUTDOWN\n", timestamp);
  }
  exit(0);
}  

void process_command(char* cmd) {
  if (strncmp(cmd, "SCALE=", sizeof(char) * 6) == 0) {
    scale = cmd[6];
  }
  else if (strncmp(cmd, "PERIOD=", sizeof(char) * 7) == 0) {
    period = atof(cmd + 7);
  }
  else if (strcmp(cmd, "START") == 0) {
    stopped = 0;
  }
  else if (strncmp(cmd, "LOG ", sizeof(char) * 4) == 0) {
    if (!flag_log) {
      dprintf(fd_log, "%s\n", cmd);
    }
  }
  else if (strcmp(cmd, "STOP") == 0) {
    stopped = 1;
  }
  else if (strcmp(cmd, "OFF") == 0) {
    if (flag_log)
      dprintf(fd_log, "%s\n", cmd);
    shutdown();
  }
  if (flag_log) {
    dprintf(fd_log, "%s\n", cmd);
  }
}

int main(int argc, char* argv[]) {

  while (1)
  {
    int c;
    int option_index = 0;

    static struct option long_options[] =
       {{"period", required_argument,  0,  0},
       {"scale",  required_argument,  0,  0},
       {"log",    required_argument,  0,  0}
       };
    
    c = getopt_long(argc, argv, "", long_options, &option_index);
    if (c == -1) 
      break;
    else if (c != 0) {
    fprintf(stderr, "Error: unrecognized option\n");
    exit(1);
    }
    else if (c == 0) {
      const char* opt_name = long_options[option_index].name;
      // --threads option
      if (strcmp(opt_name, "period") == 0) {
      if (optarg)
        period = atof(optarg);  // get the number of threads 
      }
      else if (strcmp(opt_name, "scale") == 0) {
      if (optarg)  
        scale = optarg[0];
      }
      else if (strcmp(opt_name, "log") == 0) {
      if (optarg) {
        flag_log = 1;
	  fd_log = creat(optarg, 0666);
	  }
      }
    } 
    else {
      fprintf(stderr, "Error: option not recognized\n");
      exit(1);
    }
  }

  button = mraa_gpio_init(60);
  sensor = mraa_aio_init(1);
  mraa_gpio_dir(button, MRAA_GPIO_IN);
  
  struct timeval tv;
  time_t usecs_old, usecs_new;
  handle_err(gettimeofday(&tv, 0));
  usecs_old = 0;

  struct pollfd poll_fds[] = {
    {STDIN_FILENO, POLLIN | POLLHUP | POLLERR, 0}
  };

  char buf[64];

  while (1) {

    handle_err(gettimeofday(&tv, 0));
    usecs_new = tv.tv_sec * 1000000 + tv.tv_usec;
    if ((double)(usecs_new - usecs_old) / 1000000.0 > period && !stopped) {
      // Create report
      double temp = get_temp();
      char timestamp[32];
      get_timestamp(timestamp);
      sprintf(buf, "%s %.1f\n", timestamp, temp);
      fputs(buf, stdout);
      // Append report to log
      if (flag_log) {
      dprintf(fd_log, "%s", buf);
      }
      // Update time
      usecs_old = usecs_new;
    }

    if (poll(poll_fds, 1, 0) < 0) {
      fprintf(stderr, "Error: poll failed\n");
    }

    if (poll_fds[0].revents & POLLIN) {
      char buf_cmd[256];
      char cmd[256];
      memset(cmd, 0, 256);
      int n_bytes = read(STDIN_FILENO, buf_cmd, sizeof(buf_cmd));
      int i = 0;
      int j = 0;
      for (; i < n_bytes; i ++) {
      if (buf_cmd[i] == '\n') {
        process_command(cmd);
	  // Reset command
	    memset(cmd, 0, 32);
	      j = 0;
	      }
	      else {
	        cmd[j] = buf_cmd[i];
		  j ++;
		  }
      }
    }

    if (mraa_gpio_read(button)) {
      shutdown();
    }
  }
  mraa_gpio_close(button);
  mraa_aio_close(sensor);
  exit(1);
}
